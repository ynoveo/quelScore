sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"sap/ui/core/routing/History",
	"sap/ui/model/json/JSONModel",
	"sap/m/Dialog",
	"sap/m/Button",
	"sap/ui/commons/TextField",
	"sap/ui/layout/form/SimpleForm"
], function (Controller, History, JSONModel, Dialog, Button, TextField, SimpleForm) {
	"use strict";

	return Controller.extend("QuickStartApplication.controller.Pronostics", {
/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf QuickStartApplication.view.Pronostics
		 */
		onInit: function() {
            var oModel = new JSONModel();
            //oModel.loadData("http://www.quelscore.com/JSON_V2016.php?action=MATCHLIST&email=francois.dumont@ynoveo.fr&pass=azerty&phase=A");
            oModel.loadData("../webapp/localService/matchlist.json");
            this.getView().setModel(oModel);
	},
	
		openPopup: function(oEvent) {
			//var label = new sap.m.Label({ text : sap.ui.getCore().byId("equipeA").getTitle() });
			var bindingContext = oEvent.getSource().getBindingContext();
			var title = bindingContext.getProperty("txtequipeA")+" - "+bindingContext.getProperty("txtequipeB");

			var label = new sap.m.Label({ text : title });
			var scoreA = new TextField({value:"0", width:"2em", maxLength:1});
			var scoreB = new TextField({value:"0", width:"2em", maxLength:1});
			var simpleForm = new SimpleForm({editable: true,content: [label, scoreA, scoreB]});
			
			var dialog = new Dialog({
				title: "Mon pronostic",
				//type: "Default",
/*					content: new Input({
						value: "0"
					}),*/
					content: simpleForm,
				beginButton: new Button({
					text: "OK",
					press: function () {
						dialog.close();
					}
				}),
				afterClose: function() {
					dialog.destroy();
				}
			});

 
			//to get access to the global model
			this.getView().addDependent(dialog);
			dialog.open();
		},
		
		test: function (toPrint, json) {
			var jsonToPrint = JSON.stringify(toPrint);
			if(json) {
				jQuery.sap.log.error(jsonToPrint);
			} else {
				jQuery.sap.log.error(toPrint);
			}
		},
/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf QuickStartApplication.view.Pronostics
		 *///	onBeforeRendering: function() {
//
//	},
/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf QuickStartApplication.view.Pronostics
		 *///	onAfterRendering: function() {
//
//	},
/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf QuickStartApplication.view.Pronostics
		 *///	onExit: function() {
//
//	}
		/**
	*@memberOf QuickStartApplication.controller.Pronostics
	*/
    onNavBack: function () {
//      This code was generated by the layout editor.
            var oHistory, sPreviousHash;
 
			oHistory = History.getInstance();
			sPreviousHash = oHistory.getPreviousHash();

			if (sPreviousHash !== undefined) {
				window.history.go(-1);
			} else {
				this.getRouter().navTo("appHome", {}, true /*no history*/);
			}
		}
	});
});
/**
var oModel = new JSONModel(Device);
oModel.loadData("http://www.quelscore.com/JSON_V2016.php?action=MATCHLIST&email=francois.dumont@ynoveo.fr&pass=azerty&phase=A");
this.getView().setModel(oModel);
*/