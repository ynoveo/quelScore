sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"sap/ui/core/routing/History",
	"sap/ui/model/json/JSONModel",
	"sap/ui/model/Filter",
	"sap/ui/model/FilterOperator",
	"sap/ui/model/FilterType",
	"sap/m/MessageBox",
	"sap/m/Dialog",
	"sap/m/Button",
	"sap/m/Label",
	"sap/m/Input",
	"sap/m/MessageToast",
	"sap/m/Text"
], function (Controller, History, JSONModel, Filter, FilterOperator, FilterType, MessageBox, Dialog, Button, Label, Input, MessageToast, Text) {
	"use strict";
	return Controller.extend("QuickStartApplication.controller.Groupe", {
		/**
		 * Called when a controller is instantiated and its View controls (if available) are already created.
		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.
		 * @memberOf QuickStartApplication.view.Pronostics
		 */
onInit: function () {
			sap.ui.core.UIComponent.getRouterFor(this).getRoute("mesGroupes").attachPatternMatched(this.onIDMatched, this);
		},
		
onIDMatched: function(oEvent) {
		    var ogModel=sap.ui.getCore().getModel("global");
			var sLogin = ogModel.getProperty("/pseudo");
			var sPass = ogModel.getProperty("/pwd");
			var sPreURL = ogModel.getProperty("/preURL");
			var sUrl = sPreURL + "JSON_V2021.php?action=GRPLIST&email=" + sLogin + "&pass=" + sPass;
			var oModel = new JSONModel();
			if(sap.ui.getCore().getModel("global").getProperty("/mode") === "test") {
				oModel.loadData("../webapp/localService/groupes.json");
			} else {
				oModel.loadData(sUrl,{},false);				
			}
			this._oList = this.byId("masterList");
			
			this.getView().setModel(oModel);
			var bBut = this.byId("segBut");
			bBut.setSelectedKey("allGroup");

		
},
		// Event handler for the master list. It is attached declaratively.
		onUpdateFinished: function (oEvent) {
//			this._setItem();
		},
		_getListBinding: function () {
			return this._oList.getBinding("items");
		},
		_navToDetails: function (oListItem) {
			sap.ui.core.UIComponent.getRouterFor(this).navTo("UserList");	
		},
/*		_setItem: function() {
			var aItems = this._oList.getItems();
			if (aItems.length === 0) {
				return;
			}
			
		}, */
		onSearch: function (oEvent) {
			if (oEvent.getParameter("refreshButtonPressed")) {
				this._getListBinding().refresh();
				return;
			}
			this._sCurrentSearchTerm = oEvent.getSource().getValue();
			var aFilters = [];
			if (this._sCurrentSearchTerm) {
				aFilters.push(new Filter("NomGroup", FilterOperator.Contains, this._sCurrentSearchTerm));
			}
//			aFilters.push(new Filter("isMember", FilterOperator.EQ, "X"));
			// Set filters on list. Note that this replaces existing filters.
			this._getListBinding().filter(aFilters, FilterType.Application);
		},
		/**
		 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered
		 * (NOT before the first rendering! onInit() is used for that one!).
		 * @memberOf QuickStartApplication.view.Pronostics
		 */
		//	onBeforeRendering: function() {
		//
		//	},
		/**
		 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
		 * This hook is the same one that SAPUI5 controls get after being rendered.
		 * @memberOf QuickStartApplication.view.Pronostics
		 */
		//	onAfterRendering: function() {
		//
		//	},
		/**
		 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
		 * @memberOf QuickStartApplication.view.Pronostics
		 */
		//	onExit: function() {
		//
		//	}
		/**
	*@memberOf QuickStartApplication.controller.Pronostics
	*/
onNavBack: function () {
			//      This code was generated by the layout editor.
var oHistory, sPreviousHash;
			oHistory = History.getInstance();
			sPreviousHash = oHistory.getPreviousHash();
			if (sPreviousHash !== undefined) {
				window.history.go(-1);
			} else {
				this.getRouter().navTo("appHome", {}, true	/*no history*/);
			}
		},
		/**
	*@memberOf QuickStartApplication.controller.Groupe
	*/
onNavToGroup: function (oEvent) {
//			var oListItem = oEvent.getParameter("listItem") || oEvent.getSource();
			var oListItem = oEvent.getParameter("listItem");
//			var sPath = oListItem.getBindingContext().getPath();
			// sap.ui.core.UIComponent.getRouterFor(this).navTo("UserList", {
			// 	groupId: oListItem.getBindingContext().getPath().substr(1)
			// });
//			sap.ui.core.UIComponent.getRouterFor(this).navTo("UserList", {
//				groupId: oListItem.getBindingContext().getModel().getProperty(sPath)
//			});
			sap.ui.core.UIComponent.getRouterFor(this).navTo("UserList", {
				groupId: oListItem.getBindingContext().getProperty("idGroup")
			});
		},
		/**
	*@memberOf QuickStartApplication.controller.Groupe
	*/
/*
	onPullToRefresh: function(oEvent) {
			var oPullToRefresh = oEvent.getSource();
			// Hide the pull to refresh when data has been loaded
			this._oList.attachEventOnce("updateFinished", function() {
				// Note: Do not use oEvent here, because UI5 might have reinitialized this instance already (instance pooling for performance reasons)
				oPullToRefresh.hide();
			});
			this._getListBinding().refresh();
		},	
*/		
		
onNewPressed: function () {

//This code was generated by the layout editor.
			var oController = this;
			var ogModel=sap.ui.getCore().getModel("global");
			var sLogin = ogModel.getProperty("/pseudo");
			var sPass = ogModel.getProperty("/pwd");	
			var sPreURL = ogModel.getProperty("/preURL");
			var inputViz = true;
			var labText = "Nom du groupe à créer";
			if (sLogin==="" || sPass===""){
				inputViz = false;
				labText = "Pour créer un groupe, vous devez vous identifier depuis la page d'accueil";
			} 
			var dialog = new Dialog({
				title: "Nouveau groupe",
				type: "Message",
				content: [
//					new Text({ text: 'Entrer vos identifiants' }),
					new Text({ text: labText }),
					new Input("NomGroup", {visible : inputViz})

				],
				beginButton: new Button({
					text: "Créer",
					visible: inputViz,
					press: function () {
						sap.ui.core.BusyIndicator.show();
						var sGroup = encodeURIComponent(sap.ui.getCore().byId("NomGroup").getValue());
						var sUrl = sPreURL + "JSON_V2021.php?action=ADDGRP&autoconfirm=O&email=" + sLogin + "&pass=" + sPass + "&groupname=" + sGroup;
						var otModel = new JSONModel();
						otModel.loadData(sUrl, {}, false);
						//MessageToast.show("code retour = " + otModel.getProperty("/reponse/retcode"));
						if(otModel.getProperty("/reponse/retcode") === "0") {
							sGroup = decodeURIComponent(sGroup);
							MessageToast.show("Groupe créé : " + sGroup);
							dialog.close();
							// refresh model
							sUrl = sPreURL + "JSON_V2021.php?action=GRPLIST&email=" + sLogin + "&pass=" + sPass;
							var oModel = new JSONModel();
							oModel.loadData(sUrl,{},false);
							oController.getView().setModel(oModel);	
							sap.ui.core.BusyIndicator.hide();
//							push du groupe
//							this.getView().getModel().refresh(true);
						} else {
							MessageToast.show(otModel.getProperty("/reponse/retmsg"));
						}
					}
				}),
				endButton: new Button({
					text: 'Annuler',
					press: function () {
						dialog.close();
					}
				}),
				afterClose: function() {
					dialog.destroy();
				}
			});

			dialog.open();
		},


	
	OnGrpSel: function (oEvent) {
	//This code was generated by the layout editor.
	var aFilters = [];
				if (oEvent.getSource().getSelectedKey()=="mesgroupes") {
					aFilters.push(new Filter("isMember", FilterOperator.EQ, "X"));
				}  else {
					aFilters.push(new Filter("isMember", FilterOperator.Contains, ""));
				}
				this._getListBinding().filter(aFilters, FilterType.Application);
			}
		});
	});	/**
var oModel = new JSONModel(Device);
oModel.loadData("http://www.quelscore.com/JSON_V2016.php?action=MATCHLIST&email=francois.dumont@ynoveo.fr&pass=azerty&phase=A");
this.getView().setModel(oModel);
*/